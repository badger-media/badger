version: "3.8"
services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: badger_test
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "root", "-d", "badger_test"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: quay.io/minio/minio:latest
    ports:
      - "9000:9000"
      - "9090:9090"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: rootroot
    command: ["server", "/data", "--console-address", ":9090"]

  minio_init:
    image: quay.io/minio/minio:latest
    depends_on:
      - minio
    entrypoint: |
      /bin/sh -c "
        chmod +x /opt/bin/mc;
        mc alias set docker http://minio:9000 root rootroot;
        mc mb docker/badger;
        mc mb docker/uploads;
        exit 0
      "

  tusd:
    image: tusproject/tusd:sha-b4ffdf4
    depends_on:
      - minio
    ports:
      - "1080:1080"
    environment:
      AWS_ACCESS_KEY_ID: root
      AWS_SECRET_ACCESS_KEY: rootroot
      AWS_REGION: us-east-1
    command:
      [
        "-s3-bucket=uploads",
        "-s3-endpoint=http://minio:9000",
        "-s3-object-prefix=/uploads",
        "-port=1080",
      ]

  ontime:
    image: getontime/ontime:v2.28.17
    ports:
      - "4001:4001"
    volumes:
      - ontime_data:/server/preloaded-db

  server:
    image: ghcr.io/ystv/badger/server:latest
    platform: linux/amd64
    ports:
      - "3000:3000"
    environment: &badger_env
      DATABASE_URL: "postgres://root:postgres@postgres:5432/badger_test?sslmode=disable"
      TUS_ENDPOINT: "http://tusd:1080/files"
      PUBLIC_TUS_ENDPOINT: "http://localhost:1080/files"
      S3_ENDPOINT: "http://minio:9000"
      AWS_ACCESS_KEY_ID: "root"
      AWS_SECRET_ACCESS_KEY: "rootroot"
      AWS_REGION: "us-east-1"
      STORAGE_BUCKET: "badger"
      API_SHARED_SECRET: "password"
      PUBLIC_URL: "http://localhost:3000"
      JWT_SIGNING_KEY: "somesecret"

  jobrunner:
    image: ghcr.io/ystv/badger/jobrunner:latest
    platform: linux/amd64
    command: ["--watch"]
    environment: *badger_env

volumes:
  postgres_data: {}
  minio_data: {}
  ontime_data: {}
