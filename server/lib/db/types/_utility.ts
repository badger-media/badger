import { ShowModel } from "./show";
import { z } from "zod";
import { ContinuityItemModel } from "./continuityitem";
import { RundownModel } from "./rundown";
import { RundownItemModel } from "./rundownitem";
import { MediaModel } from "./media";
import { MediaProcessingTaskModel } from "./mediaprocessingtask";

/*
 * These types are used in desktop and the tRPC API. They're defined here to ensure that the types stay in sync,
 * and that we can use the zod-prisma autogenerated ones as a base. (NB: we have `relationModel` set to false in the
 * zod-prisma config because it'd create circular types, so we have to define relations manually.)
 */

export const PartialShowModel = ShowModel.extend({
  continuityItems: z.array(ContinuityItemModel),
  rundowns: z.array(RundownModel),
});
const PartialMediaModel = MediaModel.extend({});
export const CompleteContinuityItemModel = ContinuityItemModel.extend({
  media: PartialMediaModel.nullable(),
});
export const CompleteShowModel = ShowModel.extend({
  continuityItems: z.array(CompleteContinuityItemModel),
  rundowns: z.array(
    RundownModel.extend({
      items: z.array(
        RundownItemModel.extend({
          media: z.array(PartialMediaModel),
        }),
      ),
    }),
  ),
});

export const CompleteMediaModel = PartialMediaModel.extend({
  tasks: z.array(MediaProcessingTaskModel),
});
