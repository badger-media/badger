// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "./client"
  previewFeatures = ["views"]
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "./types"
  useMultipleFiles = true
  writeBarrelFiles = true
  createInputTypes = true
  addIncludeType   = false
  addSelectType    = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  name  String
  email String?

  isActive    Boolean      @default(false)
  permissions Permission[] @default([])

  identities  Identity[]
  connections Connection[]

  @@map("users")
}

model Identity {
  id         Int    @id @default(autoincrement())
  provider   String
  identityID String
  userID     Int

  user User @relation(fields: [userID], references: [id])

  @@unique([provider, identityID])
  @@map("identities")
}

enum Permission {
  Basic
  ManageUsers
  ManageShows
  ArchiveMedia
  SUDO
}

model Connection {
  id           Int              @id @default(autoincrement())
  userId       Int
  target       ConnectionTarget
  refreshToken String

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, target])
  @@map("connections")
}

enum ConnectionTarget {
  google
}

model Show {
  id    Int      @id @default(autoincrement())
  name  String
  start DateTime

  /// The version of the show. This is incremented every time the show, or any of its dependent data, is changed.
  /// This is used by Desktop to watch for changes.
  version Int @default(0)

  ytStreamID String?
  ytBroadcastID String?

  rundowns        Rundown[]
  continuityItems ContinuityItem[]
  metadata        Metadata[]

  @@map("shows")
}

view ShowWithDuration {
  id              Int      @unique
  name            String
  start           DateTime
  durationSeconds Int
  end             DateTime

  /// The version of the show. This is incremented every time the show, or any of its dependent data, is changed.
  /// This is used by Desktop to watch for changes.
  version Int @default(0)

  ytStreamID String?
  ytBroadcastID String?

  @@map("shows_with_duration")
}

model Rundown {
  id     Int    @id @default(autoincrement())
  name   String
  showId Int
  order  Int

  ytBroadcastID String?

  show     Show          @relation(fields: [showId], references: [id])
  items    RundownItem[]
  assets   Asset[]
  metadata Metadata[]

  @@map("rundowns")
}

enum RundownItemType {
  Segment
  VT

  @@map("rundown_item_type")
}

model RundownItem {
  id              Int             @id @default(autoincrement())
  name            String
  rundownId       Int
  order           Int
  durationSeconds Int
  type            RundownItemType
  notes           String          @default("")

  media   Media? @relation(fields: [mediaId], references: [id], onDelete: SetNull)
  mediaId Int?

  rundown Rundown @relation(fields: [rundownId], references: [id])

  // Do not be tempted to include a @@unique on the order!
  // See https://github.com/prisma/prisma/issues/13115 and https://github.com/prisma/prisma/issues/8807
  @@map("rundown_items")
}

model ContinuityItem {
  id              Int    @id @default(autoincrement())
  name            String
  order           Int
  showId          Int
  durationSeconds Int
  ytBroadcastID String?

  media   Media? @relation(fields: [mediaId], references: [id], onDelete: SetNull)
  mediaId Int?

  show Show @relation(fields: [showId], references: [id])

  // Do not be tempted to include a @@unique on the order!
  // See https://github.com/prisma/prisma/issues/13115 and https://github.com/prisma/prisma/issues/8807
  @@map("continuity_items")
}

enum MetadataTargetType {
  Show
  Rundown
  ShowOrRundown
}

enum MetadataValueType {
  Text
  LongText
  URL
}

model MetadataField {
  id       Int                @id @default(autoincrement())
  name     String
  type     MetadataValueType
  target   MetadataTargetType
  archived Boolean            @default(false)
  default  Boolean            @default(false)

  values Metadata[]

  @@map("metadata_fields")
}

model Metadata {
  id      Int  @id @default(autoincrement())
  value   Json
  fieldId Int

  showId    Int?
  rundownId Int?

  field   MetadataField @relation(fields: [fieldId], references: [id])
  show    Show?         @relation(fields: [showId], references: [id], onDelete: Cascade)
  rundown Rundown?      @relation(fields: [rundownId], references: [id], onDelete: Cascade)

  @@unique([fieldId, showId, rundownId])
  @@index([showId])
  @@index([rundownId])
  @@map("metadata")
}

enum SettingsCategory {
  YouTube
}

enum SettingKey {
  TitleMetadataID
  DescriptionMetadataID
}

model Setting {
  id       Int              @id @default(autoincrement())
  category SettingsCategory
  key      SettingKey
  value    Json

  @@unique([category, key])
  @@map("settings")
}

enum MediaState {
  Pending
  Processing
  Ready
  ReadyWithWarnings
  ProcessingFailed
  Archived

  @@map("media_state")
}

enum AssetType {
  Still
  Graphic
  SoundEffect
  Music

  @@map("asset_type")
}

model Asset {
  id   Int       @id @default(autoincrement())
  name String
  type AssetType

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  rundown   Rundown        @relation(fields: [rundownId], references: [id], onDelete: Cascade)
  rundownId Int
  loadJobs  LoadAssetJob[]
  mediaId   Int

  @@map("assets")
}

model Media {
  id              Int        @id @default(autoincrement())
  name            String
  rawPath         String
  path            String?
  durationSeconds Int
  state           MediaState @default(Pending)

  rundownItems    RundownItem[]
  continuityItems ContinuityItem[]
  tasks           MediaProcessingTask[]
  process_jobs    ProcessMediaJob[]
  assets          Asset[]

  @@map("media")
}

enum MediaProcessingTaskState {
  Pending
  Running
  Complete
  Failed
  Warning
}

model MediaProcessingTask {
  id             Int                      @id @default(autoincrement())
  media_id       Int
  media          Media                    @relation(fields: [media_id], references: [id], onDelete: Cascade)
  description    String
  additionalInfo String                   @default("")
  state          MediaProcessingTaskState @default(Pending)

  @@unique([media_id, description])
  @@map("media_processing_tasks")
}

enum JobState {
  Pending
  Running
  Complete
  Failed

  @@map("job_state")
}

model BaseJob {
  id          Int       @id @default(autoincrement())
  workerId    String?
  state       JobState  @default(Pending)
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?

  externalJobProvider String?
  /// The ID of the job in the external job execution system (e.g. Nomad)
  externalJobID       String?

  ProcessMediaJob ProcessMediaJob?
  LoadAssetJob    LoadAssetJob?
  DummyTestJob    DummyTestJob[]

  @@map("base_jobs")
}

enum MediaFileSourceType {
  Tus
  GoogleDrive
  S3
}

model ProcessMediaJob {
  id      Int   @id @default(autoincrement())
  mediaId Int
  media   Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  sourceType MediaFileSourceType
  source     String

  base_job_id Int     @unique
  base_job    BaseJob @relation(fields: [base_job_id], references: [id], onDelete: Cascade)

  @@map("process_media_jobs")
}

model LoadAssetJob {
  id         Int                 @id @default(autoincrement())
  sourceType MediaFileSourceType
  source     String
  asset_id   Int

  asset Asset @relation(fields: [asset_id], references: [id], onDelete: Cascade)

  base_job_id Int     @unique
  base_job    BaseJob @relation(fields: [base_job_id], references: [id], onDelete: Cascade)

  @@map("load_asset_jobs")
}

/// Only used for testing.
model DummyTestJob {
  id        Int     @id @default(autoincrement())
  base_job  BaseJob @relation(fields: [baseJobId], references: [id])
  baseJobId Int

  @@map("dummy_test_jobs")
}
